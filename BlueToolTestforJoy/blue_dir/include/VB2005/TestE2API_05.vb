' TestE2API_05.vb : Declares the DLL functions for vb2005.
' Generated by C:\work_bluesuite_2_5\p4\common\hosttools\bluesuite_2_5\prodtest\scripts\extract_tt_api.pl from TestE2.h;  at 03/02/14 - 11:36:28

Imports System.Text
Imports System.Runtime.InteropServices

Module TestE2
    Public Const TE2_GENERAL_ERROR As Integer = -1
    Public Const TE2_OK As Integer = 0
    Public Const TE2_ERROR_CHIP_NOT_RECOGNISED As Integer = 1
    Public Const TE2_ERROR_SPI_READ_FAIL As Integer = 2
    Public Const TE2_ERROR_SPI_WRITE_FAIL As Integer = 3
    Public Const TE2_ERROR_CHIP_STOP As Integer = 4
    Public Const TE2_ERROR_CHIP_START As Integer = 5
    Public Const TE2_ERROR_INIT_FAIL As Integer = 6
    Public Const TE2_ERROR_BOOT_PROG_HALTED As Integer = 7
    Public Const TE2_ERROR_XAP As Integer = 8
    Public Const TE2_ERROR_TIMEOUT As Integer = 9
    Public Const TE2_ERROR_EEPROM_FAIL As Integer = 10
    Public Const TE2_ERROR_EEPROM_ADDR As Integer = 11
    Public Const TE2_ERROR_FILE_NOT_FOUND As Integer = 12
    Public Const TE2_ERROR_CREATE_FILE As Integer = 13
    Public Const TE2_ERROR_THREAD As Integer = 14
    Public Const TE2_ERROR_BUSY As Integer = 15
    Public Const TE2_ERROR_VERIFY_FAIL As Integer = 16
    Public Const TE2_ERROR_EXCESS_DATA As Integer = 17
    Public Const TE2_ERROR_PARTIAL_FAILURE As Integer = 18
    Public Const TE2_ERROR_UNSUPPORTED As Integer = 19
    Public Const TE2_ERROR_SPIUNLOCK As Integer = 100
    Public Const TE2_SPI_LPT As Integer = 1
    Public Const TE2_SPI_USB As Integer = 2
    Public Const TE2_USE_DEFAULT_I2C_PIO As Integer = 255
    <DllImport("TestE2.dll", EntryPoint:="te2GetVersion", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Sub te2GetVersion (ByVal versionStr As StringBuilder)
    End Sub
    <DllImport("TestE2.dll", EntryPoint:="te2Open", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2Open (ByVal transport As Integer, ByVal port As Integer, ByVal device As Integer) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2OpenSpiUnlock", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2OpenSpiUnlock (ByVal transport As Integer, ByVal port As Integer, ByVal device As Integer, ByVal unlockKey As String) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2OpenTrans", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2OpenTrans (ByVal trans As String) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2OpenSpiUnlockTrans", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2OpenSpiUnlockTrans (ByVal trans As String, ByVal unlockKey As String) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2Close", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Sub te2Close ()
    End Sub
    <DllImport("TestE2.dll", EntryPoint:="te2GetDetectedDevices", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2GetDetectedDevices (ByRef devices As UShort) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2GetFailedDevices", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2GetFailedDevices (ByRef devices As UShort) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2IsBusy", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2IsBusy () As Byte
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2Program", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2Program (ByVal filename As String, ByVal wait As Byte) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2ProgramBroad", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2ProgramBroad (ByVal filename As String, ByVal devices As UShort, ByVal wait As Byte) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2Fill", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2Fill (ByVal value As UShort, ByVal wait As Byte) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2FillBroad", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2FillBroad (ByVal value As UShort, ByVal devices As UShort, ByVal wait As Byte) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2Dump", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2Dump (ByVal filename As String, ByVal wait As Byte) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2GetSize", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2GetSize (ByRef size As UShort) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2GetInfo", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2GetInfo (ByRef devSelect As UShort, ByRef byteAddr As UShort) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2SetI2cPios", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2SetI2cPios (ByVal sda As Byte, ByVal scl As Byte, ByVal wp As Byte) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2WriteBcHeader", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2WriteBcHeader () As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2GetResult", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2GetResult () As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2GetLastError", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2GetLastError () As IntPtr
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2GetAvailableSpiPorts", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2GetAvailableSpiPorts (ByRef maxLen As UShort, ByVal ports As StringBuilder, ByVal trans As StringBuilder, ByRef count As UShort) As Integer
    End Function
    <DllImport("TestE2.dll", EntryPoint:="te2Verify", _
    CharSet:=CharSet.Ansi, CallingConvention:=CallingConvention.StdCall)> _
    Function te2Verify (ByVal filename As String, ByVal wait As Byte) As Integer
    End Function
End Module
